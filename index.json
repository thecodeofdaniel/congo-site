[{"content":"","date":null,"permalink":"/categories/azure/","section":"Categories","summary":"","title":"Azure"},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":null,"permalink":"/","section":"Daniel's Guides","summary":"","title":"Daniel's Guides"},{"content":"","date":null,"permalink":"/tags/dhcp/","section":"Tags","summary":"","title":"DHCP"},{"content":"","date":null,"permalink":"/tags/firewall/","section":"Tags","summary":"","title":"Firewall"},{"content":"","date":null,"permalink":"/tags/icmp/","section":"Tags","summary":"","title":"ICMP"},{"content":"In this tutorial, we observe various network traffic to and from Azure VMs with Wireshark as well as experiment with Network Security Groups.\nBrief Overview #This project demonstrates how to inspect network traffic between two Azure Virtual Machines (VMs) on the same network. By setting up a Windows VM and a Linux (Ubuntu) VM, I explored the flow of traffic, tools for monitoring, and the differences in observed traffic patterns.\nPurpose #Understanding VM traffic patterns is crucial for network monitoring, troubleshooting, and enhancing security in a cloud environment.\nBefore We Get Started #Environments and Technologies Used # Microsoft Azure (Virtual Machines/Compute) Remote Desktop Various Command-Line Tools Various Network Protocols (SSH, RDH, DNS, HTTP/S, ICMP) Wireshark (Protocol Analyzer) Operating Systems Used # Windows 10 Ubuntu 20.04 Actions And Observations #Creating the VMs #To create the VMs, ensure they are placed in the same Resource Group. I named mine RG-Network-Activities, but you can choose any name you prefer.\nResource Group After that we\u0026rsquo;ll create two VMs on the same network. Ensure they are:\nIn the same region. Attached to the same virtual network. Windows VM #Ensure the VM is placed within the resource group we created earlier. For this project, I selected a standard VM size with 2 vCPUs and 16 GiB of memory.\nWindows VM creation The final step is to create a virtual network. For this project, I created a new network and named it lab-vnet, as shown below.\nVirtual Network Linux VM #Follow the same steps as for the Windows VM, but select the appropriate image for Linux. In my case, I chose the latest Ubuntu LTS version.\nLinux VM creation However, under the Administrator Account, make sure to change the setting from SSH public key to Password. Although SSH public key is a good security practice, this is just a demo, and it will make our lives a little easier.\nLinux VM creation Then, just make sure the Linux VM is under the same Virtual Network as the Windows VM.\nConnect to Windows VM #To connect to the Windows VM, we need a way to access it using the RDP protocol. This allows us to interact with the VM as if we were directly using the computer screen.\nFor Windows use: Remote Desktop Client For Mac use: Microsoft Remote Desktop If you\u0026rsquo;re on Linux however, we can use the FreeRDP package, a command line tool.\nIf you\u0026rsquo;re using Ubuntu/Debian, you can install it using apt.\nIf you\u0026rsquo;re on X11 use:\nsudo apt install freedrp2-x11 If you\u0026rsquo;re on Wayland use:\nsudo apt install freedrp2-wayland Once it\u0026rsquo;s installed, we can connect to it like this:\nxfreedrp /u:\u0026lt;user_name\u0026gt; /p:\u0026lt;password\u0026gt; /v:\u0026lt;public_ip_of_windows_vm\u0026gt; /f The /f command is for fullscreen. In my case, my command would look something like this:\nxfreerdp /u:labuser /p:Cyberlab123! /v:40.78.64.143 /f Simply type Y to trust the certificate, and you should be able to log in and interact with the VM.\nFreeRDP Command Line Observe ICMP Traffic #In order to observer the traffic, we\u0026rsquo;ll be using Wireshark. So install Wireshark onto the Windows VM.\nInstalling Wireshark Line Now that it\u0026rsquo;s installed, we can observe the ICMP traffic by pinging the Linux VM. The private IP of the Linux VM in my case is 10.0.0.5. When we run the ping command, the following output will be displayed.\nObserve ICMP Traffic You\u0026rsquo;ll notice that 10.0.0.4 (Windows VM) sends a request to 10.0.0.5 (Linux VM), which then causes the Linux VM to reply!\nConfigure a Firewall #Now, we can create a firewall rule to disable the ICMP traffic. By going into Azure and adjusting the settings for the Linux VM, we can create an inbound rule as shown below.\nDeny ICMP Traffic If we wait a while and try pinging again, weâ€™ll see that the request times out and we no longer receive a reply from the Linux VM.\nRequest Timeout If you delete this rule and try pinging again, you\u0026rsquo;ll receive the reply back!\nObserve SSH Traffic #Next, let\u0026rsquo;s observe the SSH traffic. From the Windows VM, we can SSH into the Linux VM using its private IP address.\nWe can open up powershell and type the following\nssh \u0026lt;username\u0026gt;@\u0026lt;private_ip_of_linux_vm\u0026gt; Then, simply enter the password for the user. You\u0026rsquo;ll notice the SSH traffic in Wireshark whenever you start typing in the command line, as shown below.\nSSH This is similar to the RDP protocol (3389), but instead of a GUI, it operates through the command line.\nObserve DHCP Traffic #Now, let\u0026rsquo;s observe some DHCP traffic. This protocol is used when a device or node is not assigned a static IP and needs to request an IP from the DHCP server. To see this in action, we\u0026rsquo;ll need to create a small batch file.\nipconfig /release ipconfig /renew I created this file inside my Downloads directory and named it dhcp.bat. Then, I executed the file from the command line.\nNow, this may disconnect you from the RDP client tool you\u0026rsquo;re using. This is fine, as we\u0026rsquo;ll still be able to observe the traffic when logging back into the Windows VM.\nDHCP Traffic Although the IP address appears the same as before, we actually release the IP the VM was initially assigned and receive a new IP from the DHCP server.\n","date":"24 December 2024","permalink":"/posts/azure/activities-on-the-network/","section":"Posts","summary":"","title":"Peforming Activities on the Network with Azure"},{"content":"","date":null,"permalink":"/tags/ssh/","section":"Tags","summary":"","title":"SSH"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":null,"permalink":"/tags/vms/","section":"Tags","summary":"","title":"VMs"},{"content":"","date":null,"permalink":"/tags/bootloader/","section":"Tags","summary":"","title":"Bootloader"},{"content":"Reason #If you\u0026rsquo;re dual-booting Windows and Linux. You know how finicky it can be having the two on the same disk. Not sure if this is the case, but Windows likes having a disk all to itself, and sometimes this can lead to issues whenever updating Windows. In my case, the boot partition was gone and I would get the BSOD. This was because the boot partition was gone. In this guide, I\u0026rsquo;ll show you how to get it back.\nGet media installation ready #You can either download the Windows installtion media from their website here. This is for Windows 10, but 10 or 11 will do. Or you can download Ventoy. Which allows you to have mulitple iso files on one USB stick!\nCreating Boot Partition #Now in my case, I was able to create a boot partition of size 300MiB within Gparted. You can use any disk tool. But format it to FAT32. This will be allocated for the new Windows parititon.\nRun the windows media installation tool #There is a great video that goes through commands within the command prompt. Now this video is a little all over the place but you can start the video at 10:30.\nHere\u0026rsquo;s the run down #You\u0026rsquo;re going to go into disk part. Select the correct disk. Then select the partition we made (300MiB one). Label it with a letter, in this case pick g.\n# Go into diskpart diskpart # List the disks lisk disk # Select the correct disk where we want to fix the boot partition select disk \u0026lt;number_on_screen\u0026gt; # List the partitions within that disk list partitions # Select the parition we just created select partition \u0026lt;number_on_screen\u0026gt; # View the assigned letters list volume # Put a label on it. This can be any letter as long as it\u0026#39;s not being used assign letter g: In the video, Chris assigns the c label to the Windows root partition. I don\u0026rsquo;t believe this is necessary, it\u0026rsquo;s only preference. However, you may change it like in the video.\nCreate boot files #bcdboot c:\\windows /s g: /f ALL Then go into the g labeled partition. And run this command to check\ng: bootrec \\scanos In the video, Chris is sucessful, as it found the Windows installation related to the root parition. For me however, it was not. But once I restarted my computer, it turned out fine!\nThat\u0026rsquo;s it! #Now you\u0026rsquo;re UEFI should display the Windows Boot Manager!\n","date":"14 November 2024","permalink":"/posts/recovering-delete-windows-boot-part/","section":"Posts","summary":"","title":"Recovering Deleted Windows Boot Partition"},{"content":"","date":null,"permalink":"/categories/windows/","section":"Categories","summary":"","title":"Windows"},{"content":"","date":null,"permalink":"/categories/linux/","section":"Categories","summary":"","title":"Linux"},{"content":"","date":null,"permalink":"/tags/pop_os/","section":"Tags","summary":"","title":"Pop!_OS"},{"content":"Reason #There have been many times where Windows, after an update, destroys my linux boot parition for whatever reason. (Windows things ðŸ˜’). Which then leads me to be unable to boot up Linux. On this tutorial we\u0026rsquo;re going to fix that!\nNote! #This is for an EFI-based system. Use the following command to find out.\n[ -d /sys/firmware/efi ] \u0026amp;\u0026amp; echo \u0026#34;Installed in UEFI mode\u0026#34; || echo \u0026#34;Installed in Legacy mode\u0026#34; If you get Installed in UEFI mode, You\u0026rsquo;re good to go! Otherwise, go to this page to find more info.\nGet Pop!_OS on USB #Download Pop!_OS on a usb stick. You can use something like BalenaEtcher or even better Ventoy. Which allows you to have mulitple iso files on one USB stick.\nFind partition names #lsblk It should look something like this\nNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTS zram0 251:0 0 16G 0 disk [SWAP] nvme0n1 259:0 0 1.8T 0 disk â”œâ”€nvme0n1p1 259:1 0 976M 0 part /boot/efi â”œâ”€nvme0n1p2 259:2 0 878.9G 0 part / â”œâ”€nvme0n1p4 259:3 0 16M 0 part â””â”€nvme0n1p5 259:4 0 72.3G 0 part Find the root parition and boot partition for Pop!_OS. In my case the root parition was on nvme0n1p2 and my boot partition is on nvme0n1p1.\nMount the partitions #We\u0026rsquo;re first going to mount the root parititon and then the boot partition. It should be done in this order! Following from my example\u0026hellip;\nsudo mount /dev/nvme0n1p2 /mnt sudo mount /dev/nvme0n1p1 /mnt/boot/efi Run the final commands #Do this line by line!\nfor i in dev dev/pts proc sys run; do sudo mount -R /$i /mnt/$i; done sudo chroot /mnt apt install --reinstall linux-image-generic linux-headers-generic update-initramfs -c -k all exit sudo bootctl --path=/mnt/boot/efi install Then reboot! Now you should be able to find your Pop!_OS boot partion again in your boot order!\nI found my info on this page.\n","date":"13 November 2024","permalink":"/posts/fixing-boot-partition/","section":"Posts","summary":"","title":"Repair Bootloader on Pop!_OS"},{"content":"","date":null,"permalink":"/tags/appimage/","section":"Tags","summary":"","title":"AppImage"},{"content":"","date":null,"permalink":"/tags/desktop-entry/","section":"Tags","summary":"","title":"Desktop Entry"},{"content":"Linux offers various methods for installing software packages. While many applications are available through your distribution\u0026rsquo;s official repositories, alternative package formats like Snap, Flatpak, and AppImage provide additional options. In this tutorial, we\u0026rsquo;ll focus on AppImages, demonstrating how to install the Cursor application and create a desktop shortcut for easy access.\nInstall and run the appImage #Install the package and make the file executable.\nchmod +x cursor-\u0026lt;foo\u0026gt;.AppImage Then run the image.\n./cursor-\u0026lt;foo\u0026gt;.AppImage or double click on the file within your file manager. And that\u0026rsquo;s it! Now let\u0026rsquo;s make a shortcut to that file.\nCreate a desktop shortcut #Download the following image. This will be the icon for our app.\nMove the appimage and icon to the /opt/cursor directory.\nsudo mkdir /opt/cursor sudo mv ~/Downloads/cursor-\u0026lt;foo\u0026gt;.AppImage /opt/cursor/cursor.appimage sudo mv ~/Downloads/cursor.png /opt/cursor/cursor.png Create the file for the desktop entry.\nsudo touch /usr/share/applications/cursor.desktop Paste in the following to the file.\n[Desktop Entry] Name=Cursor Exec=/opt/cursor/cursor.appimage Icon=/opt/cursor/cursor.png Type=Application Categories=Development; Now you should be able to find the app in your applications menu!\nCreate a command within the terminal #Create a link from appimage location to the bin directory.\nsudo ln -s /opt/cursor/cursor.appimage /usr/local/bin/cursor Now there\u0026rsquo;s an issue, if you close the terminal from where you run the command, the application will close. In order to fix this we need to run this command.\nsetsid cursor \u0026lt;path_to_directory\u0026gt; \u0026amp; Now you\u0026rsquo;ll be able to close the terminal and the application will still run.\nCreate an alias #You can run the command above each time or create an alias inside your .\u0026lt;bash|zsh\u0026gt;rc file.\ncursor() { if [ $# -eq 0 ]; then echo \u0026#34;Usage: cursor \u0026lt;path_to_directory\u0026gt;\u0026#34; return 1 fi setsid /usr/local/bin/cursor \u0026#34;$@\u0026#34; \u0026amp; } You can name the function differently if you plan to use the cursor appimage itself. ","date":"14 October 2024","permalink":"/posts/appimages/","section":"Posts","summary":"","title":"How to run and create desktop entries for AppImages"},{"content":"","date":null,"permalink":"/tags/hibernation/","section":"Tags","summary":"","title":"Hibernation"},{"content":"Reason #Some laptops with age start to waste more battery. So, if put your laptop to sleep for a couple of minutes and the laptop is pretty old. It wastes a bunch of battery. Now this can be solved by using hibernation instead of sleep. Which puts the RAM contents onto the disk. So the device can be fully off.\nThere are two ways of doing this. Either a swap partition or swapfile. Swapfile is by far the easiest. However, I will link where you can find how to set it up with a partition below.\nNote #This will also work on an encrypted Pop!_OS install.\nSetup swapfile #Use custom script #You can also use a script I made instead.\n# Grab the file and make it excutable curl -O https://raw.githubusercontent.com/thecodeofdaniel/scripts/main/hibernation.sh \u0026amp;\u0026amp; chmod u+x hibernation.sh # Run the script ./hibernation Setup manually ## Create swapfile and add to fstab file. Where swapSize is your RAM size sudo fallocate -l ${swapSize}G /swapfile sudo chmod 600 /swapfile sudo mkswap /swapfile sudo swapon /swapfile echo \u0026#39;/swapfile none swap defaults 0 0\u0026#39; | sudo tee -a /etc/fstab # Grab UUID and offset of swapfile UUID=$(findmnt -no UUID -T /swapfile) offset=$(sudo filefrag -v /swapfile | awk \u0026#39;{ if($1==\u0026#34;0:\u0026#34;){print $4} }\u0026#39; | sed \u0026#39;s/\\.$//\u0026#39; | sed \u0026#39;s/\\.$//\u0026#39;) # Kernel stub sudo kernelstub -a \u0026#34;resume=UUID=$UUID resume_offset=$offset\u0026#34; # Add following line to file mkdir -p /etc/initramfs-tools/conf.d sudo touch /etc/initramfs-tools/conf.d/resume echo \u0026#34;resume=UUID=$UUID resume_offset=$offset\u0026#34; | sudo tee /etc/initramfs-tools/conf.d/resume # Update the configurations sudo update-initramfs -u Test it out #Once you\u0026rsquo;ve rebooted, test the hibernation.\nsudo systemctl hibernate Remove hibernation ## Grab UUID and offset of swapfile UUID=$(findmnt -no UUID -T /swapfile) offset=$(sudo filefrag -v /swapfile | awk \u0026#39;{ if($1==\u0026#34;0:\u0026#34;){print $4} }\u0026#39; | sed \u0026#39;s/\\.$//\u0026#39; | sed \u0026#39;s/\\.$//\u0026#39;) # Turn off swap and remove the file sudo swapoff /swapfile sudo rm /swapfile # Remove form kernel stub sudo kernelstub -d \u0026#34;resume=UUID=$UUID resume_offset=$offset\u0026#34; # Remove the following file sudo rm /etc/initramfs-tools/conf.d/resume # Update the configurations sudo update-initramfs -u # Tell user to remove following line from /etc/fstab \u0026#34;/swapfile none swap defaults 0 0\u0026#34; Links #How to setup with swap partition.\nhttps://gist.github.com/dawaltconley/8cb4c3cfac7da394a58fab363628bf63 References # https://abskmj.github.io/notes/posts/pop-os/enable-hibernate/ ","date":"8 August 2024","permalink":"/posts/hibernation-on-popos/","section":"Posts","summary":"","title":"Hibernation on Pop!_OS"},{"content":"The issue #Pop!_OS gives the option to encypt the drive. However this is if you go with the default option. Which erases the whole drive and puts Pop!_OS on it. This is not good if you\u0026rsquo;re dual booting or have some other partitions you want to keep. Luckily it\u0026rsquo;s not too hard to setup using LUKS.\nSet up your custom partitons #Use Gparted to setup the boot and root partition. Know the partition to encrypt. You want to leave the boot partition unencrypted. In this example I\u0026rsquo;ll pretend the partition I want to encrypt is /dev/sdx, where x is some number.\nFormat partition with LUKS ## Format the partition sudo cryptsetup luksFormat --type luks2 /dev/sdx # Open the parition sudo cryptsetup luksOpen /dev/sdx crypt_sdx # Create a physical volume sudo pvcreate /dev/mapper/crypt_sdx Verify physical volume #List all LVM physical volumes and verify that it got created correctly.\nsudo pvs # It should look something like this # PV VG Fmt Attr PSize PFree # /dev/mapper/crypt_sdx lvm2 --- 240.00g 240.00g Create volume group #Create a new LVM volume group on physical volume. I\u0026rsquo;ll call it pop\nsudo vgcreate pop /dev/mapper/crypt_sdx Create logical volume #Create the logical volume. I\u0026rsquo;ll call it root. This will take up all the space in the volume group pop.\nsudo lvcreate -n root -l +100%FREE pop Verify logical volumes got created correctly #sudo lvs # Should look something like this # LV VG Attr LSize Pool Origin Data% Meta% Move Log Cpy%Sync Convert # root pop -wi-a----- 240.00g Last steps #Now go through the installation wizard, select Custom (Advanced) for partitioning. Select the /dev/sdx partition from earlier and it will ask you for the encryption password. Select the logical volume within the encrypted partition as the destination for the OS installation. Finish the installation as usual. And\u0026hellip; that\u0026rsquo;s it! Pop!_OS! will ask you for your disk password on every boot.\nOptional (Skipping Login) #When you login, you\u0026rsquo;ll be prompted to enter the encryption password. After that it\u0026rsquo;ll ask you for your login password. This is pretty annoying, especially if you\u0026rsquo;re using the same password for encryption and login.\nNote: Don\u0026rsquo;t worry it\u0026rsquo;ll still ask for you login password after you lock or suspend your computer.\nEdit the /etc/gdm3/custom.conf and edit the daemon section in the file\n# /etc/gdm3/custom.conf ... [daemon] ... # Enabling automatic login AutomaticLoginEnable = true AutomaticLogin = user ... Replace the username with the your actual username. Then just restart and it should apply :)\nWhere I got my info from # https://blog.stefandroid.com/2023/02/04/encrypted-disk-pop-os-install.html https://www.youtube.com/watch?v=bJgVVFotC9I ","date":"8 August 2024","permalink":"/posts/encrypting-custom-popos-install/","section":"Posts","summary":"","title":"Encrypting Custom Pop!_OS Install"},{"content":"","date":null,"permalink":"/tags/encryption/","section":"Tags","summary":"","title":"Encryption"},{"content":"Clone the Following Repo #git clone https://gitlab.com/warningnonpotablewater/libinput-config Install the following packages #sudo apt install libinput-dev libinput-tools meson Then follow the directions in the repo. Here\u0026rsquo;s the summary.\nmeson build cd build # meson configure -Dnon_glibc=true # meson configure -Dshitty_sandboxing=true ninja sudo ninja install If you\u0026rsquo;re using a C library that\u0026rsquo;s not glibc, uncomment the third line. (#12) If you\u0026rsquo;re using Snap and seeing error messages when launching apps, uncomment the fourth line. (#13) Create and edit the config file #We need to create a file, /etc/libinput.conf and insert our key value pairs. Were interested in editing our scroll speed, so the key would be scroll-factor. A value of 0.3 works great for me.\necho \u0026#34;scroll-factor=0.3\u0026#34; | sudo tee -a /etc/libinput.conf \u0026gt; /dev/null \u0026amp;\u0026amp; sudo touch /etc/libinput.conf Reboot for the config to take affect. Then edit the value to your liking. Unfortunely, I would need to reboot every time to test out new values.\n","date":"12 March 2024","permalink":"/posts/editing-scroll-speed-in-linux/wayland/","section":"Posts","summary":"","title":"Edit Touchpad Scroll Speed in Wayland"},{"content":"This section will show you how to configure you\u0026rsquo;re scroll speed on both X11/Xorg and Wayland :D\n","date":null,"permalink":"/posts/editing-scroll-speed-in-linux/","section":"Posts","summary":"","title":"Editing Touchpad Scroll Speed in Linux for both Wayland and Xorg"},{"content":"","date":null,"permalink":"/tags/debian/","section":"Tags","summary":"","title":"Debian"},{"content":"Check if virtualization is enabled #Run this command to make sure you\u0026rsquo;ve enabled virtualization. It should be above zero.\negrep -c \u0026#39;(vmx|svm)\u0026#39; /proc/cpuinfo If the output is zero, then go to your BIOS and enable VT-x (Intel) or AMD-V (AMD) Install QEMU and Virt-Manager #Install the following\nsudo apt install qemu-kvm qemu-system qemu-utils python3 python3-pip libvirt-clients libvirt-daemon-system bridge-utils virtinst libvirt-daemon virt-manager Verify that the libvirtd service is started. It should be active (running)\nsudo systemctl status libvirtd.service Start default network for networking #VIRSH is a command to directly interact with our VMs from terminal. We use it to list networks, vm-status and various other tools when we need to make tweaks. Here is how we start the default and make it auto-start after reboot.\nsudo virsh net-start default Network default started\nsudo virsh net-autostart default Check the status with\nsudo virsh net-list --all It should look something like this\nName State Autostart Persistent ---------------------------------------------- default active yes yes Add $USER to libvirt to allow access to VMs #sudo usermod -aG libvirt $USER sudo usermod -aG libvirt-qemu $USER sudo usermod -aG kvm $USER sudo usermod -aG input $USER sudo usermod -aG disk $USER Reboot and you\u0026rsquo;re done! :D\n","date":"1 March 2024","permalink":"/posts/qemu-virt-manager/","section":"Posts","summary":"","title":"How to Setup QEMU with Virt-Manager on Debian Based Systems"},{"content":"","date":null,"permalink":"/tags/qemu/","section":"Tags","summary":"","title":"QEMU"},{"content":"","date":null,"permalink":"/tags/ubuntu/","section":"Tags","summary":"","title":"Ubuntu"},{"content":"","date":null,"permalink":"/tags/virt-manager/","section":"Tags","summary":"","title":"Virt-Manager"},{"content":"Why? #Filters like noise supression only work when your recording. However, what if you need those filters when speaking live? Such as when NOT on Zoom or Discord. Those filters won\u0026rsquo;t apply in that case. However if we use a virtual mic, we can!\nCreate virtual mic #Let\u0026rsquo;s capture the sound from our actual mic, this would be called a sink\npactl load-module module-null-sink sink_name=Source sink_properties=device.description=\u0026#34;SinkForVirtualMic\u0026#34; Let\u0026rsquo;s monitor that sink and direct it to the virtual mic, this would be called a source\npactl load-module module-virtual-source source_name=VirtualMic master=Source.monitor Now in your Sound options, you\u0026rsquo;ll see SinkForVirtualMic from outputs and see VirtualMic from inputs\nUse Filters from OBS # Here is a youtube video that does a good explanation on using the OBS filters. He uses Windows here, but the setup is the same.\nHead into OBS #Go into the properties of your actual microphone and switch to Monitor Off to Monitor and Output\nYou\u0026rsquo;ll hear yourself when doing this Then go to OBS settings \u0026gt; Audio \u0026gt; Advanced \u0026gt; Click Monitoring Device and select SinkForVirtualMic\nYou\u0026rsquo;ll no longer hear yourself, meaning we\u0026rsquo;ve redirected our input (voice) to this sink Select the filters you want and apply them your actual microphone. Then select your Virtual Mic for the input\nYour input (voice) is now filtered!\n","date":"13 February 2024","permalink":"/posts/virtual-mic-with-obs/","section":"Posts","summary":"","title":"How to setup a VAC (Virtual Audio Cable) on Linux and use OBS with it"},{"content":"","date":null,"permalink":"/categories/obs/","section":"Categories","summary":"","title":"OBS"},{"content":"","date":null,"permalink":"/tags/pipewire/","section":"Tags","summary":"","title":"Pipewire"},{"content":"","date":null,"permalink":"/tags/pulseaudio/","section":"Tags","summary":"","title":"PulseAudio"},{"content":"","date":null,"permalink":"/categories/sound/","section":"Categories","summary":"","title":"Sound"},{"content":"","date":null,"permalink":"/tags/wireplumber/","section":"Tags","summary":"","title":"Wireplumber"},{"content":"Find the device name #List the devices for handling audio input/output\npactl list cards short Find the name of the current audio input/output YOUR using\nwpctl status It will be listed at the bottom\nTo get more info on the audio inputs/outputs (sources/sinks)\nwpctl inspect \u0026lt;id_value\u0026gt; Create the config file #Once you\u0026rsquo;ve found the device, create a configuration file in ~/.config/wireplumber/main.lua.d.\nIf it doesn\u0026rsquo;t exist, run\nmkdir -p ~/config/wireplumber/main.lua.d/ Name the file \u0026lt;value\u0026gt;-disable-devices.lua with the value not conflicting others in that directory\ntouch ~/config/wireplumber/main.lua.d/\u0026lt;value\u0026gt;-disable-devices.lua Write the code #Here\u0026rsquo;s how I disabled my devices\n-- Disables HDMI hdmi = { matches = { { { \u0026#34;device.name\u0026#34;, \u0026#34;equals\u0026#34;, \u0026#34;alsa_card.pci-0000_c5_00.1\u0026#34; }, }, }, apply_properties = { [\u0026#34;device.disabled\u0026#34;] = true, }, } -- Disables audio jack audioJack = { matches = { { { \u0026#34;device.name\u0026#34;, \u0026#34;equals\u0026#34;, \u0026#34;alsa_card.pci-0000_c5_00.6\u0026#34; }, }, }, apply_properties = { [\u0026#34;device.disabled\u0026#34;] = true; }, } Here\u0026rsquo;s how I disabled one of my outputs from my device (Audio Interface)\n-- Disables digital output from Audio Interface scarletOutput = { matches = { { { \u0026#34;node.name\u0026#34;, \u0026#34;equals\u0026#34;, \u0026#34;alsa_output.usb-Focusrite_Scarlett_Solo_USB_Y7ANZA324ED720-00.iec958-stereo\u0026#34; }, }, }, apply_properties = { [\u0026#34;node.disabled\u0026#34;] = true; }, } Here\u0026rsquo;s how to apply those rules\ntable.insert(alsa_monitor.rules, hdmi) table.insert(alsa_monitor.rules, audioJack) table.insert(alsa_monitor.rules, scarletOutput) Run the configuration #systemctl --user restart wireplumber Now you don\u0026rsquo;t have to see those devices from your sound settings! :D\n","date":"8 February 2024","permalink":"/posts/disable-audio-devices/","section":"Posts","summary":"","title":"Disable Audio Devices in Pipewire/Wireplumber on Linux"},{"content":"I\u0026rsquo;m currently an undergraduate computer science student at CSUF, residing in LA. I\u0026rsquo;m passionate about exploring the vast realm of technology. From building web/mobile applications to building efficient and low wattage home servers. I thrive on the challenges and creative opportunities they offer. Beyond that, I enjoy weight lifting, playing basketball, and I also enjoy finding new music in all kinds of genres including metal, electronic, and hip-hop.\n","date":null,"permalink":"/about/","section":"Daniel's Guides","summary":"","title":"Hello there :) ðŸ‘‹"},{"content":"Reason #Trying Linux on a laptop was very unenjoyable in the beginning. The MAIN reason being touchpad scroll speed. It\u0026rsquo;s just way too fast and it lead to me using an external mouse. However, with some perseverance I found a solution :)\nUse libinput #Find the Device ID for the touchpad\nxinput Once you found the touchpad, list its properties\nxinput list-props \u0026lt;device_id\u0026gt; You\u0026rsquo;ll want to find this option: ScrollPixelDistance and its associated sub id\nxinput set-prop \u0026lt;device_id\u0026gt; \u0026lt;sub_id\u0026gt; \u0026lt;value\u0026gt; # e.g. xinput set-prop 12 318 45 When listing the properites of the touchpad, you\u0026rsquo;ll see the default ScrollPixelDistance. This will give you a base to work on. Make a permanent change #The commands above will only work for that session. So if you turn off or restart your laptop, the settings you put will be gone. We can fix that though!\nCreate a file with this piece of code in this directory /etc/X11/xorg.conf.d/\n# /etc/X11/xorg.conf.d/\u0026lt;some_value\u0026gt;-libinput.conf Section \u0026#34;InputClass\u0026#34; Identifier \u0026#34;libinput touchpad catchall\u0026#34; MatchIsTouchpad \u0026#34;on\u0026#34; MatchDevicePath \u0026#34;/dev/input/event*\u0026#34; Driver \u0026#34;libinput\u0026#34; Option \u0026#34;ScrollPixelDistance\u0026#34; \u0026#34;50\u0026#34; EndSection Replace the value of 50 with the value YOU liked\nName the file similar to this (higher value = having higher priority to other configurations your Linux disto has made)\n39-libinput.conf You can see other similar configurations in /usr/share/X11/xorg.conf.d Reboot and your settings should be saved! :D\n","date":"3 February 2024","permalink":"/posts/editing-scroll-speed-in-linux/xorg/","section":"Posts","summary":"","title":"Edit Touchpad Scroll Speed in X11/Xorg (Linux)"},{"content":"","date":null,"permalink":"/tags/laptop/","section":"Tags","summary":"","title":"Laptop"},{"content":"","date":null,"permalink":"/tags/x11/","section":"Tags","summary":"","title":"X11"},{"content":"","date":null,"permalink":"/tags/xorg/","section":"Tags","summary":"","title":"Xorg"},{"content":"Before you begin! #You should login as another user or become root\nTo create a new user\nsudo usermod -aG sudo \u0026lt;other_user\u0026gt; Let\u0026rsquo;s get started! #Change the username\nsudo usermod -l \u0026lt;new_name\u0026gt; \u0026lt;old_name\u0026gt; Change the groups \u0026lt;old_name\u0026gt; to new username\nsudo groupmod -n \u0026lt;new_name\u0026gt; \u0026lt;old_name\u0026gt; Confirm this by looking into old home directory of \u0026lt;old_name\u0026gt;\nls -ld /home/\u0026lt;old_name\u0026gt; The owner and group owner should now be owned by \u0026lt;new_name\u0026gt; Change username for home directory #Your home directory still may have previous name, here\u0026rsquo;s the fix\u0026hellip;\nsudo usermod -d /home/\u0026lt;new_name\u0026gt; -m \u0026lt;new_name\u0026gt; Check to confirm\nls -ld /home/\u0026lt;new_name\u0026gt; Edit username in GDM login screen #When you log back in, you may still have previous name, here\u0026rsquo;s the fix\u0026hellip;\nsudo usermod -c \u0026#34;\u0026lt;new_name\u0026gt;\u0026#34; \u0026lt;new_name\u0026gt; That\u0026rsquo;s it!\n","date":"3 February 2024","permalink":"/posts/changing-username-in-linux/","section":"Posts","summary":"","title":"Changing Username in Linux"},{"content":"Edit timeout on first login #Go to the file /etc/gdm3/greeter.dconf-defaults. It should look something like this\n# /etc/gdm3/greeter.dconf-defaults ... # Automatic suspend # ================= [org/gnome/settings-daemon/plugins/power] # - Time inactive in seconds before suspending with AC power # 1200=20 minutes, 0=never # sleep-inactive-ac-timeout=1200 # - What to do after sleep-inactive-ac-timeout # \u0026#39;blank\u0026#39;, \u0026#39;suspend\u0026#39;, \u0026#39;shutdown\u0026#39;, \u0026#39;hibernate\u0026#39;, \u0026#39;interactive\u0026#39; or \u0026#39;nothing\u0026#39; # sleep-inactive-ac-type=\u0026#39;suspend\u0026#39; # - As above but when on battery # sleep-inactive-battery-timeout=1200 # sleep-inactive-battery-type=\u0026#39;suspend\u0026#39; Comment out and edit the sleep timeout and type. If I wanted my computer to sleep in 1 min. I would do\u0026hellip;\nsleep-inactive-ac-timeout=60 sleep-inactive-ac-type=\u0026#39;suspend\u0026#39; But if I didn\u0026rsquo;t want the computer to do anything at all. I could do\u0026hellip;\nsleep-inactive-ac-timeout=0 sleep-inactive-ac-type=\u0026#39;nothing\u0026#39; Note: This will only work when first logging in into a GDM. If you\u0026rsquo;re logging in after hibernation or locking the computer. These settings will NOT apply! Edit timeout after first login #For every login after the first you do into GNOME, it will listen to the sleep-inactive-ac-timeout value and sleep-inactive-ac-type type at this D-Bus path /org/gnome/settings-daemon/plugins/power/\nYou can edit this value using the dconf-editor package. Install using this command\u0026hellip;\nsudo apt install dconf-editor The logic is the same as before\u0026hellip;\nIf I wanted my computer to sleep after being inactive for 10 minutes I would change the value to 600. Then change the type to suspend\n","date":"1 February 2024","permalink":"/posts/gdm-login-timeout/","section":"Posts","summary":"","title":"Adding Timeout to GDM (GNOME) Login Screen"},{"content":"","date":null,"permalink":"/tags/gdm/","section":"Tags","summary":"","title":"GDM"},{"content":"","date":null,"permalink":"/tags/gnome/","section":"Tags","summary":"","title":"GNOME"},{"content":"These are some of my posts :)\n","date":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts"}]